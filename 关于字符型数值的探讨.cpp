#include<iostream>
using namespace std;
int main()
{
	/*字符编码集就是ASCII码

	*/
	char b = '5', a = '8', sk = 1;
	cout << "sk = " << sk << endl;//结果为“SOH”,无法表述，当输入的为整数型字面值常量时，即输入的为十进制码
	cout << "'B'+ sk = " << ('B' + sk) << endl;//结果为67
	cout << "b = " << b << endl;  //结果为5，直接输出字符型时，为字符值本身，而非十进制编码
	char c = b + 1;
	cout << "c = " << c << endl; //结果为6
	cout << "(b + 1) = " << (b + 1) << endl; //结果为54，计算时则是十进制编码
	cout << "(a % b) = " << (a % b) << endl; //结果为3
	float f1 = 20, f2 = 20.0, f3 = 20.1;
	int i = 55;
	cout << "(i % b) = " << (i % b) << endl; //结果为2 ，可知b为53，即'5'的十进制码
	/*1.当我们输出字符型数值时，输出的便是字符型数值（即键盘上能打出的数值），但当我们用字符型数值参与计算时，参与计算的
	* 数为其十进制码
	*/
	char o = 53;
	cout << "o = " << o << endl; //结果为5，可知字符'x'实质上是十进制码的一种显现。底层为十进制
	char l = '\65';
	cout << "l = " << l << endl; //结果为5
	bool m = 'a' < 'b' + 'c';
	cout << "m = " << m << endl; //输出为1，
	bool n = '1' < 48;
	cout << "n = " << n << endl; //可见'1'为49（十进制），字符型在进行逻辑运算时，字符型也为底层数
	int q = '6';
	cout << "q = " << q << endl; //输出为54，是字符'6'的十进制编码，可知在进行赋值时字符型以十进制编码的形式参与
	//目前可知，字符只有在输出时才输出其本身。其他的情况均以十进制代码进行

	char n1 = '\65', n2 = 065, n3 = 65, n4 = 0x35, n5 = '\x35';
	cout << "n1 = " << n1 << endl; //结果为5
	cout << "n2 = " << n2 << endl; //结果为5
	cout << "n3 = " << n3 << endl;  //结果为A
	cout << "n4 = " << n4 << endl;  //结果为5
	cout << "n5 = " << n5 << endl;  //结果为5



}